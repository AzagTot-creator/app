console.log('[1/10] üö¶ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

const express = require('express');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { GoogleAuth } = require('google-auth-library');
require('dotenv').config();

console.log('[2/10] ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:');
console.log('  - express:', express ? 'OK' : 'FAIL');
console.log('  - GoogleSpreadsheet:', GoogleSpreadsheet ? 'OK' : 'FAIL');
console.log('  - GoogleAuth:', GoogleAuth ? 'OK' : 'FAIL');

const app = express();
const port = process.env.PORT || 3000;

console.log('[3/10] üõ†Ô∏è Express –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ—Ä—Ç:', port);

console.log('[4/10] üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('  - GOOGLE_CLIENT_EMAIL:', process.env.GOOGLE_CLIENT_EMAIL ? '****' + process.env.GOOGLE_CLIENT_EMAIL.slice(-10) : 'MISSING');
console.log('  - GOOGLE_PRIVATE_KEY:', process.env.GOOGLE_PRIVATE_KEY ? '****' + process.env.GOOGLE_PRIVATE_KEY.slice(-10) : 'MISSING');
console.log('  - SPREADSHEET_ID:', process.env.SPREADSHEET_ID || 'MISSING');
console.log('  - SHEETS_TO_SEARCH:', process.env.SHEETS_TO_SEARCH || 'MISSING');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
let criticalError = false;

if (!process.env.GOOGLE_CLIENT_EMAIL) {
  console.error('‚ùå FATAL: GOOGLE_CLIENT_EMAIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  criticalError = true;
}

if (!process.env.GOOGLE_PRIVATE_KEY) {
  console.error('‚ùå FATAL: GOOGLE_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  criticalError = true;
}

if (!process.env.SPREADSHEET_ID) {
  console.error('‚ùå FATAL: SPREADSHEET_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  criticalError = true;
}

if (criticalError) {
  console.error('‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.');
  process.exit(1);
}

console.log('[5/10] üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google...');
console.log('[AUTH] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google...');
try {
  const auth = new GoogleAuth({
    credentials: {
      client_email: process.env.GOOGLE_CLIENT_EMAIL,
      private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n')
    },
    scopes: ['https://www.googleapis.com/auth/spreadsheets']
  });
  console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
} catch (authError) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', authError);
  process.exit(1);
}

console.log('[6/10] üìÇ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å Google Sheets');
const SHEETS_TO_SEARCH = process.env.SHEETS_TO_SEARCH ? 
  process.env.SHEETS_TO_SEARCH.split(',').map(s => s.trim()) : 
  [];
console.log('  - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã:', process.env.SPREADSHEET_ID);
console.log('  - –õ–∏—Å—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:', SHEETS_TO_SEARCH.length > 0 ? SHEETS_TO_SEARCH : '–ù–ï –ó–ê–î–ê–ù–û');

if (SHEETS_TO_SEARCH.length === 0) {
  console.error('‚ùå FATAL: –ù–µ —É–∫–∞–∑–∞–Ω—ã –ª–∏—Å—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (SHEETS_TO_SEARCH)');
  process.exit(1);
}

console.log('[7/10] üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware Express');
app.use(express.json());
app.use((req, res, next) => {
  console.log(`üåê [${new Date().toISOString()}] ${req.method} ${req.url}`);
  next();
});
app.use(express.static('public'));

console.log('[8/10] üó∫Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤');
app.get('/', (req, res) => {
  console.log('üè† –ó–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É');
  res.sendFile(__dirname + '/index.html');
});

app.get('/healthcheck', (req, res) => {
  console.log('ü©∫ Healthcheck –∑–∞–ø—Ä–æ—Å');
  res.json({ 
    status: 'OK',
    timestamp: new Date().toISOString(),
    environment: {
      sheets_api: !!GoogleSpreadsheet,
      auth: !!GoogleAuth,
      sheets_configured: !!process.env.SPREADSHEET_ID
    }
  });
});

app.get('/search', async (req, res) => {
  const requestId = Date.now();
  console.log(`\n=== üîç –ù–û–í–´–ô –ó–ê–ü–†–û–° [${requestId}] ===`);
  console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', {
    code: req.query.code,
    ip: req.ip,
    headers: req.headers
  });

  try {
    const partialCode = req.query.code?.toLowerCase().trim();
    console.log(`[${requestId}] –ü–æ–∏—Å–∫ –∫–æ–¥–∞:`, partialCode || '–ù–ï –£–ö–ê–ó–ê–ù');

    if (!partialCode) {
      console.warn(`[${requestId}] ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞`);
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞' 
      });
    }

    console.log(`[${requestId}] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets...`);
    const auth = new GoogleAuth({
      credentials: {
        client_email: process.env.GOOGLE_CLIENT_EMAIL,
        private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n')
      },
      scopes: ['https://www.googleapis.com/auth/spreadsheets']
    });
    const client = await auth.getClient();
    const doc = new GoogleSpreadsheet(process.env.SPREADSHEET_ID, client);
    await doc.loadInfo();
    
    const foundProducts = [];
    console.log(`[${requestId}] üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –≤ ${SHEETS_TO_SEARCH.length} –ª–∏—Å—Ç–∞—Ö`);

    for (const [index, sheetName] of SHEETS_TO_SEARCH.entries()) {
      console.log(`[${requestId}] üìë –õ–∏—Å—Ç ${index + 1}/${SHEETS_TO_SEARCH.length}: ${sheetName}`);
      
      try {
        const sheet = doc.sheetsByTitle[sheetName];
        if (!sheet) {
          console.warn(`[${requestId}] ‚ö†Ô∏è –õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          continue;
        }

        const rows = await sheet.getRows();
        const headers = sheet.headerValues.map(h => h.toLowerCase());
        const indices = {
          code: headers.indexOf('–∫–æ–¥'),
          quantity: headers.indexOf('–∫—ñ–ª—å–∫—ñ—Å—Ç—å'),
          dropPrice: headers.indexOf('—Ü—ñ–Ω–∞ –¥—Ä–æ–ø'),
          retailPrice: headers.indexOf('–Ω–∞—à–∞ —Ü—ñ–Ω–∞ —Ä–æ–∑–¥—Ä—ñ–±'),
          img: headers.indexOf('img')
        };

        if ([indices.code, indices.quantity, indices.dropPrice].some(i => i === -1)) {
          console.warn(`[${requestId}] ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –ª–∏—Å—Ç–µ ${sheetName}`);
          continue;
        }

        for (const row of rows) {
          const code = row._rawData[indices.code]?.toLowerCase().trim();
          if (code && code.includes(partialCode)) {
            foundProducts.push({
              sheetName: sheetName,  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
              code: row._rawData[indices.code],
              quantity: row._rawData[indices.quantity],
              dropPrice: row._rawData[indices.dropPrice],
              retailPrice: row._rawData[indices.retailPrice],
              img: row._rawData[indices.img]
            });
          }
        }
      } catch (sheetError) {
        console.error(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—Å—Ç–∞ "${sheetName}":`, sheetError);
      }
    }

    console.log(`[${requestId}] üéâ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ: ${foundProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    res.json({ 
      success: true, 
      data: foundProducts.slice(0, 50) 
    });

  } catch (error) {
    console.error(`[${requestId}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error);
    res.status(500).json({ 
      success: false, 
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

console.log('[9/10] üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞');
app.listen(port, () => {
  console.log(`[10/10] üéâ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:');
  console.log(`   - –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:${port}`);
  console.log(`   - Healthcheck: http://localhost:${port}/healthcheck`);
});

process.on('uncaughtException', (err) => {
  console.error('‚ÄºÔ∏è –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê:', err);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ÄºÔ∏è –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ô –ü–†–û–ú–ò–°:', reason);
  process.exit(1);
});
